#+TITLE: Valutazione delle prestazioni
#+AUTHOR: Jacopo Costantini & Matteo Zambon



L'approccio *RISC* ha semplificato l'*ISA*, ma ha anche portato
- Sviluppo di tecniche di ottimizzazione molto spinte
- Nuova sensibilità per analisi più quantitative delle prestazioni dei sistemi

  *NB: misurare oggettivamente le prestazioni è MOLTO DIFFICILE*

* Misure delle prestazioni di un computer
** Tempo di esecuzione (latenza)
- Quanto impiega il mio job ad essere eseguito a sistema scarico?
- Quanto devo attendere per una query di un database?

*** Elapsed Time o Response Time
- Tiene conto di ogni cosa (accessi al disco I/O), multiprogrammazione, attese nelle code (OS), ecc...)

*** Tempo di CPU
- Vogliamo distinguere rispetto ai tempi spesi per I/O e multiprogrammazione
  - ES: comando *UNIX* *time* ( time <prog> )
    + User CPU time: 90.7u ==> Execution time
    + System CPU time: 12.9s
    + Elapsed time: 2:39
    + 100 x (90.7 + 12.9) / 159 = 63%
**  Throughput ( Banda di elaborazione )
- Quanti job possono essere eseguiti assieme su una macchina?
- Qual è il tempo di esecuzione media?
- Quanto lavoro viene completato in un certo tempo?

*** Performance
Il termine *performance* è sinonimo di *Troughput* ed è usato come misura generica della velocità di un computer

** Tempo di risposta
Il *tempo di risposta = tempo attesa in coda + tempo di esecuzione*

* Performance, Execution time, Speedup
Misuriamo il tempo di esecuzione (user CPU time) di un programmma su una macchina X: *Execution time_x

Definiamo la Performance (troughput) come:
- Performance_x = 1 / Execution time_x

Se la macchina X è più veloce di Y ad eseguire il programma
- Speedup = Execution time_y / Execution time_x = Performance_x / Performance_y = n

- X è n volte più veloce di Y

* Cicli di clock
Legame tra tempo di esecuzione e numero di cicli di clock per eseguire un programma

#+BEGIN_CENTER
CPU time ( in sec. ) = numero di cicli x T (periodo del ciclo di clock in sec.)
#+END_CENTER

** Clock rate
Clock rate (frequenza) = cicli al secondo (1 Hz = 1 cycle/sec)
+ Freq = 1/T ( dove T è il periodo del ciclo di clock )
+ T = 1/Freq (sec)

  #+BEGIN_EXAMPLE
  Un clock a 200 Mhz (200 x 10^6 Hz) ha un periodo T di clock uguale a

  (1/200 x 10^6) x 10^9 = 5 nanosecondi
  #+END_EXAMPLE

  Conoscendo il numero di cicli per l'esecuzione di un programma e la frequenza del clock:

  + CPU time (in sec) = num. cicli / Freq in Hz

** Miglioramento prestazioni

+ CPU time ( in sec ) = num. cicli x Periodo clock in sec
+ CPU time ( in sec ) = num. cicli x Freq in Hz

Per migliorare le prestazioni possiamo
- *Diminuire* il numero di cicli per eseguire un programma, oppure
- *Diminuire* il ciclo di clock (cycle time) oppure, detto in modo diverso
- *aumentare* la frequenza ( clock rate )

* Numero di cicli differenti per istruzioni differenti

- Moltiplicazioni impiegano più tempo delle addizioni
- Operazioni FP impiegano più tempo delle operazioni su interi
- L'accesso alla memoria costa di più che accedere ai registri

*NB: se cambiamo il ciclo di clock (frequenza) spesso otteniamo, come effetto collaterale, la modifica del numero di cicli necessari per eseguire le varie istruzioni*

* Cicli di clock e prestazioni

Per l'esecuzione di un programma (CPU time) sono necessari

- Un certo # di istruzioni macchina ==> IC (Instruction Count)
- Un certo # di cicli ==> numero di Cicli
- Un certo numero di secondi ==> T_exe

Se non conosciamo T_exe ma conosciamo num di cicli, possiamo ricavare T_exe sulla base di
- Periodo clock o cycle time (secondi per ciclo)
- Frequenza o clock rate (cicli per secondi)

Possiamo ricavare delle misure medie
+ *CPI* (cicli per istruzione) = num cicli / IC
  - Nota che il numero totale di cicli ( num cicli ) può essere ricavato sulla base di IC e CPI
  - Un'applicazioni FP-intensive potrebbe avere un CPI più alto della media!
+ MIPS (milioni di istruzioni per secondo) = IC/(T_exe x 10^6)

* Tempo di esecuzione e altre misure
Siamo interessati al tempo di esecuzione ( user CPU time )!!

Le altre misure, prese singolarmente, potrebbero portarci a *conclusioni errate* nel valitare le prestazioni di un programma

- Num. di cicli per eseguire un programma
- IC = num di istruzioni in un programma
- FREQ = num di cicli per secondo
- CPI = num di cicli per istruzione
- Num medio di istruzioni eseguite per secondo (es. *MIPS*)

* I Benchmark
Per misurare le prestazioni, è meglio eseguire applicazioni reali

spesso si usano programmi che rappresentano classi di applicazioni
come :
- compilatori/editor
- Applicazioni scientifiche
- Grafica
Ecc...

Piccoli benchmark (kernel)
- sono comodi per i progettisti
- possono portare ad abusi

** SPEC ( system performance evaluation cooperative )

Gli SPEC sono considerati un indicatore significativo delle prestazioni di un *hw*

** Misure sintetiche per insiemi
Nel confrontare piattaforme eseguendo programmi diversi può succedere che una piattaforma sia migliore nell'esecuzione di un programma e peggiore rispetto all'esecuzione di un altro

Abbiamo bisogno di un indice complessivo rispetto alle prestazioni misurate per un certo mix di programmi

*** Media Aritmetica (pesata)
Media aritmetica pesata dei tempi di esecuzione dei vari programmi su una certa macchina

[inserire latex]

*** Media geometrica (pesata)
Media geometrica pesata ancora dei tempi di esecuzione

[inserire latex]

** SPECint e SPECfp
SPECint e SPECfp fanno rispettivamente riferimento all'esecuzione del mix di programmi (interni o a virgola mobile) per l'elaborazione interna o FP

Gli indici SPEC danno un'indicazione complessiva del comportamento del mix di programmi su una data piattaforma

* Legge di Amdahl
Questa semplice legge fissa un limite agli incrementi di prestazioni ottenibili (*SPEEDUP*) quando introduciamo delle ottimizzazioni

- 1/s T_exe ==> frazione di T_exe non modificata dalle ottimizzazioni
- (1-1/s)T_exe ==> frazione di T_exe ridotta tramite le ottimizzazioni
- n  ==> fattore del miglioramento ottenuto tramite le ottimizzazioni

+ T_ott = 1/s T_exe + ((1 - 1/s)T_exe )/n

La legge di Amdahl fissa un limite allo speedup massimo ottenibile
- Se l'ottimizzazione è molto costante, n diventa molto grande, per cui possiamo approssimare

  T_ott ~= 1/s T_exe

- Il massimo Speedup ottenibile (per n molto grande)

  Speedup_max = T_exe / (1/s T_exe) = s

Corollario alla legge di Amdahl (motivazione CPU RISC)
È meglio rendere più veloci i casi più comuni (es. istruzioni più usate, per la cui esecuzione si impiega la maggior parte di T_exe)

* Considerazioni finali
La misura delle prestazioni su una data piattaforma è significativa
- Se è relativa allo specifico programma
- Se è basata sul tempo totale di esecuzione effettivo

Rispetto ad una data ISA gli incrementi delle prestazioni derivano da :
- Incremento della frequenza del clock ( se questo non aumenta considerevolmente il CPI )
- Miglioramento dell'organizzazione del processore per abbassare il CPI
- Miglioramento del compilatore per ridurre CPI medio o IC

** Confronto tra architettura singolo/multi ciclo
*** Singolo Ciclo
  - CPI = 1
  - Ciclo di clock (periodo) = 800 ps
    - Calcolato sulla base dell'istruzione più "costosa": *lw*
  - T_exe = IC x CPI x Periodo_clock = IC x 800 ps


*** Multi ciclo
necessario conoscere la frequenza delle varie istruzioni

- *lw CPI_0 = 5* presenti nel *22% IC*
- *sw CPI_1 = 4* presenti nel *11% IC*
- *R-Type, CPI_2 = 4* presenti nel *49% IC*
- *branch CPI_3 = 2*  presenti nel *16% IC*
- *jump CPI_4 = 3* presenti nel *2% IC*


+ *CPI_avg = 0.22 CPI_0 + 0.11 CPI_1 + 0.49 CPI_2 + 0.16 CPI_3 + 0.02 CPI_4 = 0.22 x 5 + 0.11 x 4 + 0.49 x 4 + 0.16 x 3 + 0.02 x 3 = 4.04
+ T_exe = IC x CPI_avg x Periodo_clock = IC x 4.04 x 200 ps = IC x 808 ps
