#+TITLE: Algebra di Bool
#+AUTHOR: Jacopo Costantini

* Algebra e circuiti elettrici
  I computer operano con segnali elettrici con valori di potenziale discreti.
  - sono considerati significativi soltanto due potenziali
    *high* / *Low*
  - I potenziali intermedi, che si verificano durante le transizioni di potenziale, *non vengono considerati*.

  L'aritmetica binaria è stata adottata proprio perché i
  bit sono rappresentabili naturalmente
  tramite elementi elettronici in cui siamo in grado
  distinguere i 2 stati di potenziale elettronico ( *High* / *Low*)

  Il funzionamento dei circuiti elettronici può essere modellato tramite l'algebra di Boole

  + Solo 2 valori:
    1. Valore *TRUE* (*1* o *asserted*) ==> livello di potenziale *ALTO*
    2. Valore *FALSE* (*0* o *deasserted*) ==> livello di potenziale *BASSO*
  + Operazioni logiche Booleane: *SOMMA* (*OR*), *PRODOTTO* (*AND*), *INVERSIONE LOGICA* (*NOT*)
    - *OR* (*A + B*): risultato uguale ad 1 (*TRUE*) se almeno un input è 1 (*TRUE*)
    - *AND* (*A x B*): risultato uguale ad 1 (*TRUE*) solo se tutti gli input sono 1 (*TRUE*)
    - *NOT* (*~A*): risultato uguale all'inverso dell'input (0 -> 1 uppure 1 -> 0)
    
* Blocco logico
  - Circuito elettronico con linee (*fili*) in *input* e *output*
  - possiamo associare *variabili logiche* con le varie *linee in input/output*
  - Il circuito calcola una o più *funzioni logiche*, ciascuna espriminile tramite una
    combinazione di operazioni dell'algebra di Boole *sulle variabili in input*
* Circuiti combinatori/sequenziali
  Circuiti combinatorio
  - Senza elementi di memoria - produce output che dipeende funzionalmente solo dall'input

  Circuiti sequenziali
  - Con elementi di memoria - produce output che dipende non solo dall'input ma anche dallo stato della memoria

* Funzioni Logiche
  Una funzione logica è completamente specificata da
  - Una *tabella di verità*
  - Una *equazione logica*

** Tabelle di Verità
   Dati *n input bit*, il numero di configurazione possibili degli input, ovvero il numero di righe
   della Tabella di verità, + *2^n*
   - Per ogni bit in output, la tabella contiene una colonna, con un valore definito per ognuna
     combinazione dei bit in input

     [Inserire tabella]

** Proprietà dell'algebra di Boole
   Proprietà:
   + *Identità*:
     - *OR*:  A + 0 = A
     - *AND*: A x 1 = A
   + *Nullo*:
     - *OR*:  A + 1 = 1
     - *AND*: A x 0 = 0
   + *Idempotente*:
     - *OR*:  A + A = A
     - *AND*: A x A = A
   + *Inverso*:
     - *OR*:  A + (~A) = 1
     - *AND*: A x (~A) = 0
   + *Commutativa*:
     - *OR*:  A + B = B + A
     - *AND*: A x B = B x A
   + *Associativa*:
     - *OR*:  A + (B + C) = (A + B) + C
     - *AND*: A x (B x C) = (A x B) x C
   + *Distributiva*:
     - *OR*:  A x (B + C) = (A x B) + (A x C)
     - *AND*: A + (B x C) = (A + B) x (A + C)
   + *DeMorgan*:
     - *OR*:  ~(A + B) = (~A) x (~B)
     - *AND*: ~(A x B) = (~A) + (~B)

** NAND e NOR
   *NAND* (inverso dell'operazione *AND*): ~(A x B) = A *nand* B
   *NOR*  (inverso dell'operazione *OR*):  ~(A + B) = A *nor*  B

* Porte logiche e transistor
  Tecnologia *CMOS* (Complementary Metal Oxide Semiconductor) per realizzare transistor in sul silicio
  - I transistor sono degli interruttori velocissimi che lasciano o meno passare la corrente, e sono
    comandati da un segnale elettrico

** NMOS
   *N-Type Metal Oxide Semiconductor transistor*
   - Se applichi un *ALTO* voltaggio (*Vdd*), il transistor diventa un *conduttore*
   - Se applichi un *BASSO* voltaggio (*GND*), il transistor interrompe la conduzione (*resistenza infinita*)

** PMOS
   *P_Type Metal Oxide Semiconductor transistor*
   - Se applichi un *ALTO* voltaggio (*Vdd*), il transistor interrompe la conduzione (*resistenza infinita*)
   - Se applichi un *BASSO* voltaggio (*GND*), il transistor diventa un *conduttore*


** Confronto tra porte
   Se i transistor *PMOS* sono più veloci:
   - È meglio avere transistor *PMOS* in serie
   - Porte *NOR* preferite

   Se i transistor *NMOS* sono più veloci:
   - È meglio avere transistor *NMOS* in serie
   - Porte *NAND* preferite

** Forma canonica
  Ogni *funzione logica* può essere rappresentata come *equazione logica* o come *tabella di verità*
  Ogni *equazione logica* può essere scritta in forma canonica tramite l'uso degli operatori AND, OR, NOT.

  Forma canonica *SP* (somma di prodotti)
    - Per ogni valore uguale ad 1 nell'output genera un prodotto (*mintermine*) degli input A, B, C dove gli input uguali
      a 0 appaiono negati.
      Ciascun prodotto vale 1 solo per quella determinata riga e quei determinati fattori.
      *esempio*: E = (~A * B) + (B * C)
  
  Forma canonica *PS* (prodotto di somme)
    - Per ogni valore uguale ad 0 nell'output genera una somma (*maxtermine*) degli input A, B, C dove gli input uguali
      a 1 appaiono negati.
      Ciascuna somma vale 0 solo per quella determinata riga e quei determinati fattori.
      *esempio*: E = (~A + B) * (B + C)

** Dalla forma canonica ai circuiti
  - Da una equazione logica espressa come *somma di prodotti (SP)* si realizza una funzione logica di n input e 1 output,
    costituita da 2 livelli:
    1. Primo livello:
      1.  numero di porte AND per ogni prodotto.
      2.  arietà delle porte dipende dal numero di fattori dei prodotti, es. se un prodotto ha 2 fattori la funzione AND avrà
          2 porte (arietà = 2).
    2. Secondo livello
      1. livello costituito da una porta OR per la somma.
      2. arietà della funzione OR dipende dal numero di prodotti.

** Minimizzare
  Scopo della minimizzazione:
    - data un'equazione in forma normale, es. SP, si riduce il numero di prodotti oppure il numero di variabili coinvolte in 
      ogni prodotto.
      Tale processo permette l'uso di meno porte, un'arietà ridotta dato il decretempo delle variabili e un 
      costo minore per il circuito.
  Le variabili *DON'T CARE* non hanno importanza ai fini della definizione dell'equazione, tradotto sono quelle variabili che 
  nel processo di minimizzazione (tipo *mappa di Karnaught*) non rimangono fisse.


* Tecniche di minimizzazione
  Intuitivamente, per semplificare una tabella di verità di *N* variabili di input e minimizzare
  la corrispondente forma normale *SP*, ovvero per scoprire le variabili *DON'T CARE*, basta individuare:
  + 2^1 (*coppie di*) righe *con output 1* dove
    - i valori assunti da *N - 1* variabili appaiono fissi
    - tutti i possibili valori di *una* variabile (*X*) appaiono combinati con gli altri
      *N - 1* valori fissi ==> la variabile *X* è *DON'T CARE*
  + 2^2 (*4-ple di*) righe con *output 1* dove
    - i valori assunti da *N - 2* variabili appaiono fissi
    - tutti i possibili valori *due* variabili (*X,Y*) appaiono combinati con
      gli altri *N - 2* valori fissi ==> le variabili *X* e *Y* sono *DON'T CARE*
  + 2^3 (*8-ple di*) righe *con output 1* dove
    - i valori assunti da *N - 3* variabili appaiono fissi
    - tutti i possibili valori di *tre* variabili *(X,Y,Z)* appaiono combinati con gli altri
      *N - 3* valori fissi ==> le variabili *X, Y, Z* sono *DON'T CARE*
  + 2^4 (*16-ple di*) righe *con output 1* dove ...

* Mappe di Karnaugh
  Per minimizzare a mano funzioni di poche variabili, si possono rappresentare le tabelle di verità
  con le *mappe di Karnaugh*
  - Ogni quadrato (cella) della mappa individua una combinazione di variabili in input
  - il valore contenuto nel quadrato corrispondente al valore di *output* per quella
    particolare combinazione di variabili in input
  - per convenzione nella mappa si inseriscono solo i valori uguali a 1
  - *da notare* le combinazioni delle variabili in input che *etichettiamo* i due assi
    delle mappe:
    - *Codice di Gray*: differenza di un singolo bit tra combinazioni consecutive

      
** Scopo delle mappe
   - Individuare facilmente insieme di righe (2^1, 2^2, 2^3 righe, ecc.) della tabella
     di varietà con variabili (1, 2, 3 variabili, ecc.) *DON'T CARE*
   - Gli 1 corrispondono a queste righe risultano infatti *adiacenti* nella mappa corrispondente
     + Nel considerare l'adiacenza delle celle nella mappa, si tengono conto che i *bordi orizzontali/verticali* della mappa *è come se si toccassero*
     + Le combinazioni di 2^1, 2^2, 2^3 righe della tabella di verità originale con 1, 2, 3
       variabili *DON'T CARE* diventano *rettangoli* di valori uguali ad 1 nella mappa di Karnaugh
     + Questi *rettangoli* sono composti da *2^p valori uguali ad 1*, e sono anche noti con il termine di *p-sottocubi*
